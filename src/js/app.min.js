(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _listManager = require('./components/listManager');

(0, _listManager.listManager)();

},{"./components/listManager":2}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.listManager = undefined;

var _getItem = require('./listManager/getItem');

var _addItem = require('./listManager/addItem');

var _deleteItem = require('./listManager/deleteItem');

var _appNotification = require('./listManager/appNotification');

var appListManager = document.querySelector("[data-app-list-manager]");

var listManager = exports.listManager = function listManager() {

	// only fire for `appListManager`
	if (appListManager) {

		var appNotificationEmpty = document.querySelector("[data-app-list-manager] [data-app-notification='empty']"),
		    elementUserInput = document.querySelector("[data-app-list-manager] input[type='text']"),
		    elementUserSubmit = document.querySelector("[data-app-list-manager] input[type='submit']"),
		    elementTable = document.querySelector("[data-app-list-manager] table"),
		    elementUserDelete;

		elementUserSubmit.addEventListener("click", function () {
			(0, _addItem.addItem)(elementTable, (0, _getItem.getItem)(elementUserInput));
			(0, _appNotification.appNotification)(appNotificationEmpty, elementTable);
		});

		elementUserInput.addEventListener("keyup", function (event) {
			event.preventDefault();
			if (event.keyCode === 13) {
				(0, _addItem.addItem)(elementTable, (0, _getItem.getItem)(elementUserInput));
				(0, _appNotification.appNotification)(appNotificationEmpty, elementTable);
			}
		});

		elementTable.addEventListener("click", function (event) {
			if (event.target.classList.contains("button")) {
				elementUserDelete = event.target;
				(0, _deleteItem.deleteItem)(elementUserDelete);
				(0, _appNotification.appNotification)(appNotificationEmpty, elementTable);
			}
		});
	}
};

},{"./listManager/addItem":3,"./listManager/appNotification":4,"./listManager/deleteItem":5,"./listManager/getItem":6}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.addItem = undefined;

var _returnItemId = require("./returnItemId");

var addItem = exports.addItem = function addItem(elementTable, elementUserInput) {

	if (elementUserInput) {

		var newRow = elementTable.insertRow(0),
		    newCellWithInput = newRow.insertCell(0),
		    newCellWithDelete = newRow.insertCell(0),
		    newItemId = (0, _returnItemId.returnItemId)();

		newRow.setAttribute("data-item-id", newItemId, 0);
		newCellWithInput.innerHTML = "<button class='button small secondary app-list-manager_input-delete' data-item-delete>Delete</button>";
		newCellWithDelete.innerHTML = elementUserInput;

		localStorage.setItem(newItemId, elementUserInput);
	}
};

},{"./returnItemId":7}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var appNotification = exports.appNotification = function appNotification(appNotificationEmpty, elementTable) {

	var currentTableRowsLength = elementTable.rows.length;

	if (currentTableRowsLength != 0) {
		appNotificationEmpty.style.display = "none";
	} else {
		appNotificationEmpty.style.display = "block";
	}
};

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var deleteItem = exports.deleteItem = function deleteItem(elementUserDelete) {

	var currentTableRows = document.querySelectorAll("[data-app-list-manager] table tbody tr"),
	    currentId = elementUserDelete.parentElement.parentElement.getAttribute("data-item-id"),
	    currentTableRowId;

	[].forEach.call(currentTableRows, function (row) {
		currentTableRowId = row.getAttribute("data-item-id");

		if (currentId === currentTableRowId) {
			row.remove();
			localStorage.removeItem(currentId);
		}
	});
};

},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var getItem = exports.getItem = function getItem(elementUserInput) {

	var elementUserDataItem = elementUserInput.value;

	elementUserInput.value = "";

	return elementUserDataItem;
};

},{}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var returnItemId = exports.returnItemId = function returnItemId() {

	var itemId = Math.floor(Math.random() * 10000);

	return itemId;
};

},{}]},{},[1]);
